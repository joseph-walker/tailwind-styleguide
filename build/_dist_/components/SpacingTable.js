import './SpacingTable.css.proxy.js';
/* src/components/SpacingTable.svelte generated by Svelte v3.24.0 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_component,
	create_slot,
	destroy_component,
	destroy_each,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out,
	update_slot
} from "/web_modules/svelte/internal.js";

import ClassName from "./ClassName.js";
const get_default_slot_changes = dirty => ({ measurement: dirty & /*classes*/ 1 });
const get_default_slot_context = ctx => ({ measurement: /*c*/ ctx[3].measurement });

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (74:3) <ClassName>
function create_default_slot(ctx) {
	let t0;
	let t1_value = /*c*/ ctx[3].name + "";
	let t1;

	return {
		c() {
			t0 = text(".");
			t1 = text(t1_value);
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*classes*/ 1 && t1_value !== (t1_value = /*c*/ ctx[3].name + "")) set_data(t1, t1_value);
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
		}
	};
}

// (72:1) {#each classes as c}
function create_each_block(ctx) {
	let div0;
	let classname;
	let t0;
	let div1;
	let span;
	let t1_value = /*c*/ ctx[3].measurement.value + "";
	let t1;
	let em;
	let t2_value = (/*c*/ ctx[3].measurement.unit || "") + "";
	let t2;
	let t3;
	let div2;
	let t4;
	let current;

	classname = new ClassName({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	const default_slot_template = /*$$slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], get_default_slot_context);

	return {
		c() {
			div0 = element("div");
			create_component(classname.$$.fragment);
			t0 = space();
			div1 = element("div");
			span = element("span");
			t1 = text(t1_value);
			em = element("em");
			t2 = text(t2_value);
			t3 = space();
			div2 = element("div");
			if (default_slot) default_slot.c();
			t4 = space();
			attr(div0, "class", "cell svelte-1r8sx4m");
			attr(em, "class", "unit svelte-1r8sx4m");
			attr(span, "class", "measurement svelte-1r8sx4m");
			attr(div1, "class", "cell measurement svelte-1r8sx4m");
			attr(div2, "class", "cell slot svelte-1r8sx4m");
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			mount_component(classname, div0, null);
			insert(target, t0, anchor);
			insert(target, div1, anchor);
			append(div1, span);
			append(span, t1);
			append(span, em);
			append(em, t2);
			insert(target, t3, anchor);
			insert(target, div2, anchor);

			if (default_slot) {
				default_slot.m(div2, null);
			}

			append(div2, t4);
			current = true;
		},
		p(ctx, dirty) {
			const classname_changes = {};

			if (dirty & /*$$scope, classes*/ 5) {
				classname_changes.$$scope = { dirty, ctx };
			}

			classname.$set(classname_changes);
			if ((!current || dirty & /*classes*/ 1) && t1_value !== (t1_value = /*c*/ ctx[3].measurement.value + "")) set_data(t1, t1_value);
			if ((!current || dirty & /*classes*/ 1) && t2_value !== (t2_value = (/*c*/ ctx[3].measurement.unit || "") + "")) set_data(t2, t2_value);

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope, classes*/ 5) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[2], dirty, get_default_slot_changes, get_default_slot_context);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(classname.$$.fragment, local);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(classname.$$.fragment, local);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div0);
			destroy_component(classname);
			if (detaching) detach(t0);
			if (detaching) detach(div1);
			if (detaching) detach(t3);
			if (detaching) detach(div2);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment(ctx) {
	let section;
	let em0;
	let t1;
	let em1;
	let t3;
	let em2;
	let t5;
	let current;
	let each_value = /*classes*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			section = element("section");
			em0 = element("em");
			em0.textContent = "Class";
			t1 = space();
			em1 = element("em");
			em1.textContent = "Measurement";
			t3 = space();
			em2 = element("em");
			em2.textContent = "Sample";
			t5 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(em0, "class", "cell heading svelte-1r8sx4m");
			attr(em1, "class", "cell heading measurement svelte-1r8sx4m");
			attr(em2, "class", "cell heading svelte-1r8sx4m");
			attr(section, "class", "table svelte-1r8sx4m");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, em0);
			append(section, t1);
			append(section, em1);
			append(section, t3);
			append(section, em2);
			append(section, t5);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(section, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*$$scope, classes*/ 5) {
				each_value = /*classes*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(section, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(section);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { classes } = $$props;
	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ("classes" in $$props) $$invalidate(0, classes = $$props.classes);
		if ("$$scope" in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	};

	return [classes, $$slots, $$scope];
}

class SpacingTable extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { classes: 0 });
	}
}

export default SpacingTable;