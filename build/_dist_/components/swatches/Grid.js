import './Grid.css.proxy.js';
/* src/components/swatches/Grid.svelte generated by Svelte v3.24.0 */
import {
	SvelteComponent,
	attr,
	check_outros,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	transition_in,
	transition_out
} from "/web_modules/svelte/internal.js";

import Swatch from "./Swatch.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (22:1) {#each swatches as swatch}
function create_each_block(ctx) {
	let swatch;
	let current;

	swatch = new Swatch({
			props: {
				swatch: /*swatch*/ ctx[6],
				squircle: /*squircle*/ ctx[1],
				circle: /*circle*/ ctx[2],
				filled: /*filled*/ ctx[3],
				fancy: /*fancy*/ ctx[4],
				stroked: /*stroked*/ ctx[5]
			}
		});

	return {
		c() {
			create_component(swatch.$$.fragment);
		},
		m(target, anchor) {
			mount_component(swatch, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const swatch_changes = {};
			if (dirty & /*swatches*/ 1) swatch_changes.swatch = /*swatch*/ ctx[6];
			if (dirty & /*squircle*/ 2) swatch_changes.squircle = /*squircle*/ ctx[1];
			if (dirty & /*circle*/ 4) swatch_changes.circle = /*circle*/ ctx[2];
			if (dirty & /*filled*/ 8) swatch_changes.filled = /*filled*/ ctx[3];
			if (dirty & /*fancy*/ 16) swatch_changes.fancy = /*fancy*/ ctx[4];
			if (dirty & /*stroked*/ 32) swatch_changes.stroked = /*stroked*/ ctx[5];
			swatch.$set(swatch_changes);
		},
		i(local) {
			if (current) return;
			transition_in(swatch.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(swatch.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(swatch, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let current;
	let each_value = /*swatches*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "swatches svelte-wpnnzx");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*swatches, squircle, circle, filled, fancy, stroked*/ 63) {
				each_value = /*swatches*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { swatches = [] } = $$props;
	let { squircle } = $$props;
	let { circle } = $$props;
	let { filled } = $$props;
	let { fancy } = $$props;
	let { stroked } = $$props;

	$$self.$set = $$props => {
		if ("swatches" in $$props) $$invalidate(0, swatches = $$props.swatches);
		if ("squircle" in $$props) $$invalidate(1, squircle = $$props.squircle);
		if ("circle" in $$props) $$invalidate(2, circle = $$props.circle);
		if ("filled" in $$props) $$invalidate(3, filled = $$props.filled);
		if ("fancy" in $$props) $$invalidate(4, fancy = $$props.fancy);
		if ("stroked" in $$props) $$invalidate(5, stroked = $$props.stroked);
	};

	return [swatches, squircle, circle, filled, fancy, stroked];
}

class Grid extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			swatches: 0,
			squircle: 1,
			circle: 2,
			filled: 3,
			fancy: 4,
			stroked: 5
		});
	}
}

export default Grid;