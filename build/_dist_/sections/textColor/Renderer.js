import './Renderer.css.proxy.js';
/* src/sections/textColor/Renderer.svelte generated by Svelte v3.24.0 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	init,
	insert,
	mount_component,
	null_to_empty,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "/tailwind-styleguide/web_modules/svelte/internal.js";

import StyleguideSection from "../../components/StyleguideSection.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (29:2) {#each meta.classNames as className}
function create_each_block(ctx) {
	let div;
	let p;
	let t0;
	let p_class_value;
	let t1;
	let em;
	let t2;
	let t3_value = /*className*/ ctx[1] + "";
	let t3;
	let t4;

	return {
		c() {
			div = element("div");
			p = element("p");
			t0 = text("The quick brown fox jumped over the lazy dog.");
			t1 = space();
			em = element("em");
			t2 = text(".");
			t3 = text(t3_value);
			t4 = space();
			attr(p, "class", p_class_value = "" + (null_to_empty(/*className*/ ctx[1]) + " svelte-8mtak1"));
			attr(em, "class", "svelte-8mtak1");
			attr(div, "class", "color-wrapper");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, p);
			append(p, t0);
			append(div, t1);
			append(div, em);
			append(em, t2);
			append(em, t3);
			append(div, t4);
		},
		p(ctx, dirty) {
			if (dirty & /*meta*/ 1 && p_class_value !== (p_class_value = "" + (null_to_empty(/*className*/ ctx[1]) + " svelte-8mtak1"))) {
				attr(p, "class", p_class_value);
			}

			if (dirty & /*meta*/ 1 && t3_value !== (t3_value = /*className*/ ctx[1] + "")) set_data(t3, t3_value);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (27:0) <StyleguideSection name="Text Colors" description="Utilities for controlling the text color of an element." variants={meta.variants}>
function create_default_slot(ctx) {
	let div;
	let each_value = /*meta*/ ctx[0].classNames;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "colors svelte-8mtak1");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p(ctx, dirty) {
			if (dirty & /*meta*/ 1) {
				each_value = /*meta*/ ctx[0].classNames;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function create_fragment(ctx) {
	let styleguidesection;
	let current;

	styleguidesection = new StyleguideSection({
			props: {
				name: "Text Colors",
				description: "Utilities for controlling the text color of an element.",
				variants: /*meta*/ ctx[0].variants,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(styleguidesection.$$.fragment);
		},
		m(target, anchor) {
			mount_component(styleguidesection, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const styleguidesection_changes = {};
			if (dirty & /*meta*/ 1) styleguidesection_changes.variants = /*meta*/ ctx[0].variants;

			if (dirty & /*$$scope, meta*/ 17) {
				styleguidesection_changes.$$scope = { dirty, ctx };
			}

			styleguidesection.$set(styleguidesection_changes);
		},
		i(local) {
			if (current) return;
			transition_in(styleguidesection.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(styleguidesection.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(styleguidesection, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { meta } = $$props;

	$$self.$set = $$props => {
		if ("meta" in $$props) $$invalidate(0, meta = $$props.meta);
	};

	return [meta];
}

class Renderer extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { meta: 0 });
	}
}

export default Renderer;