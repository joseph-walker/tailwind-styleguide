import './Renderer.css.proxy.js';
/* src/sections/width/Renderer.svelte generated by Svelte v3.24.0 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	text,
	transition_in,
	transition_out
} from "/web_modules/svelte/internal.js";

import StyleguideSection from "../../components/StyleguideSection.js";
import SpacingTable from "../../components/SpacingTable.js";
import ClassName from "../../components/ClassName.js";

function create_default_slot_2(ctx) {
	let t;

	return {
		c() {
			t = text("vw");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (30:1) <SpacingTable {classes} let:measurement={m}>
function create_default_slot_1(ctx) {
	let div;
	let div_style_value;

	return {
		c() {
			div = element("div");
			attr(div, "class", "swatch svelte-wv8a8j");
			attr(div, "style", div_style_value = `width: ${/*m*/ ctx[2].value + (/*m*/ ctx[2].unit || "")}`);
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*m*/ 4 && div_style_value !== (div_style_value = `width: ${/*m*/ ctx[2].value + (/*m*/ ctx[2].unit || "")}`)) {
				attr(div, "style", div_style_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (26:0) <StyleguideSection name="Width" description="Width great power comes great responsibiity" variants={variants}>
function create_default_slot(ctx) {
	let p;
	let t0;
	let classname;
	let t1;
	let t2;
	let spacingtable;
	let current;

	classname = new ClassName({
			props: {
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	spacingtable = new SpacingTable({
			props: {
				classes: /*classes*/ ctx[0],
				$$slots: {
					default: [
						create_default_slot_1,
						({ measurement: m }) => ({ 2: m }),
						({ measurement: m }) => m ? 4 : 0
					]
				},
				$$scope: { ctx }
			}
		});

	return {
		c() {
			p = element("p");
			t0 = text("Exceedingly large widths — like those that use ");
			create_component(classname.$$.fragment);
			t1 = text(" units — may be larger than they appear in this table.");
			t2 = space();
			create_component(spacingtable.$$.fragment);
			attr(p, "class", "description svelte-wv8a8j");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t0);
			mount_component(classname, p, null);
			append(p, t1);
			insert(target, t2, anchor);
			mount_component(spacingtable, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const classname_changes = {};

			if (dirty & /*$$scope*/ 8) {
				classname_changes.$$scope = { dirty, ctx };
			}

			classname.$set(classname_changes);
			const spacingtable_changes = {};
			if (dirty & /*classes*/ 1) spacingtable_changes.classes = /*classes*/ ctx[0];

			if (dirty & /*$$scope, m*/ 12) {
				spacingtable_changes.$$scope = { dirty, ctx };
			}

			spacingtable.$set(spacingtable_changes);
		},
		i(local) {
			if (current) return;
			transition_in(classname.$$.fragment, local);
			transition_in(spacingtable.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(classname.$$.fragment, local);
			transition_out(spacingtable.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(p);
			destroy_component(classname);
			if (detaching) detach(t2);
			destroy_component(spacingtable, detaching);
		}
	};
}

function create_fragment(ctx) {
	let styleguidesection;
	let current;

	styleguidesection = new StyleguideSection({
			props: {
				name: "Width",
				description: "Width great power comes great responsibiity",
				variants: /*variants*/ ctx[1],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(styleguidesection.$$.fragment);
		},
		m(target, anchor) {
			mount_component(styleguidesection, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const styleguidesection_changes = {};
			if (dirty & /*variants*/ 2) styleguidesection_changes.variants = /*variants*/ ctx[1];

			if (dirty & /*$$scope, classes*/ 9) {
				styleguidesection_changes.$$scope = { dirty, ctx };
			}

			styleguidesection.$set(styleguidesection_changes);
		},
		i(local) {
			if (current) return;
			transition_in(styleguidesection.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(styleguidesection.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(styleguidesection, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { classes } = $$props;
	let { variants } = $$props;

	$$self.$set = $$props => {
		if ("classes" in $$props) $$invalidate(0, classes = $$props.classes);
		if ("variants" in $$props) $$invalidate(1, variants = $$props.variants);
	};

	return [classes, variants];
}

class Renderer extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { classes: 0, variants: 1 });
	}
}

export default Renderer;