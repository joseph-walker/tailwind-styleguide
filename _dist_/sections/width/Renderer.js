import './Renderer.css.proxy.js';
/* src/sections/width/Renderer.svelte generated by Svelte v3.24.0 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "/web_modules/svelte/internal.js";

import StyleguideSection from "../../components/StyleguideSection.js";
import SpacingTable from "../../components/SpacingTable.js";
import ClassName from "../../components/ClassName.js";

function create_default_slot_1(ctx) {
	let div2;
	let div1;
	let div0;
	let div0_style_value;
	let div1_style_value;
	let div1_title_value;

	return {
		c() {
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			attr(div0, "class", "swatch-inner svelte-2oluyg");
			attr(div0, "style", div0_style_value = `width: ${/*m*/ ctx[2].value + (/*m*/ ctx[2].unit ?? "")}`);
			attr(div1, "class", "swatch-outer svelte-2oluyg");
			attr(div1, "style", div1_style_value = /*m*/ ctx[2].unit === "vw" ? "overflow:hidden;" : "");

			attr(div1, "title", div1_title_value = /*m*/ ctx[2].unit === "vw"
			? "this example has been purposely trimmed so it fits to screen "
			: "");

			attr(div2, "class", "swatch svelte-2oluyg");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div1);
			append(div1, div0);
		},
		p(ctx, dirty) {
			if (dirty & /*m*/ 4 && div0_style_value !== (div0_style_value = `width: ${/*m*/ ctx[2].value + (/*m*/ ctx[2].unit ?? "")}`)) {
				attr(div0, "style", div0_style_value);
			}

			if (dirty & /*m*/ 4 && div1_style_value !== (div1_style_value = /*m*/ ctx[2].unit === "vw" ? "overflow:hidden;" : "")) {
				attr(div1, "style", div1_style_value);
			}

			if (dirty & /*m*/ 4 && div1_title_value !== (div1_title_value = /*m*/ ctx[2].unit === "vw"
			? "this example has been purposely trimmed so it fits to screen "
			: "")) {
				attr(div1, "title", div1_title_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div2);
		}
	};
}

// (46:0) <StyleguideSection name="Width" description="Width great power comes great responsibiity" variants={variants}>
function create_default_slot(ctx) {
	let p;
	let t1;
	let spacingtable;
	let current;

	spacingtable = new SpacingTable({
			props: {
				classes: /*classes*/ ctx[0],
				$$slots: {
					default: [
						create_default_slot_1,
						({ measurement: m }) => ({ 2: m }),
						({ measurement: m }) => m ? 4 : 0
					]
				},
				$$scope: { ctx }
			}
		});

	return {
		c() {
			p = element("p");
			p.textContent = "All width options";
			t1 = space();
			create_component(spacingtable.$$.fragment);
			attr(p, "class", "description svelte-2oluyg");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			insert(target, t1, anchor);
			mount_component(spacingtable, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const spacingtable_changes = {};
			if (dirty & /*classes*/ 1) spacingtable_changes.classes = /*classes*/ ctx[0];

			if (dirty & /*$$scope, m*/ 12) {
				spacingtable_changes.$$scope = { dirty, ctx };
			}

			spacingtable.$set(spacingtable_changes);
		},
		i(local) {
			if (current) return;
			transition_in(spacingtable.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(spacingtable.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(p);
			if (detaching) detach(t1);
			destroy_component(spacingtable, detaching);
		}
	};
}

function create_fragment(ctx) {
	let styleguidesection;
	let current;

	styleguidesection = new StyleguideSection({
			props: {
				name: "Width",
				description: "Width great power comes great responsibiity",
				variants: /*variants*/ ctx[1],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(styleguidesection.$$.fragment);
		},
		m(target, anchor) {
			mount_component(styleguidesection, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const styleguidesection_changes = {};
			if (dirty & /*variants*/ 2) styleguidesection_changes.variants = /*variants*/ ctx[1];

			if (dirty & /*$$scope, classes*/ 9) {
				styleguidesection_changes.$$scope = { dirty, ctx };
			}

			styleguidesection.$set(styleguidesection_changes);
		},
		i(local) {
			if (current) return;
			transition_in(styleguidesection.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(styleguidesection.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(styleguidesection, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { classes } = $$props;
	let { variants } = $$props;

	$$self.$set = $$props => {
		if ("classes" in $$props) $$invalidate(0, classes = $$props.classes);
		if ("variants" in $$props) $$invalidate(1, variants = $$props.variants);
	};

	return [classes, variants];
}

class Renderer extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { classes: 0, variants: 1 });
	}
}

export default Renderer;