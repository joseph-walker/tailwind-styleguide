import './Splash.css.proxy.js';
/* src/components/views/Splash.svelte generated by Svelte v3.24.0 */
import {
	SvelteComponent,
	append,
	attr,
	binding_callbacks,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	noop,
	run_all,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "/tailwind-styleguide/web_modules/svelte/internal.js";

import { parseWithTailwind, parseWithString } from "./../../stores/state.js";
import Upload from "./../../components/icons/Upload.js";

function create_fragment(ctx) {
	let main;
	let div;
	let upload;
	let t0;
	let em;
	let t2;
	let input;
	let t3;
	let hr;
	let t4;
	let button;
	let current;
	let mounted;
	let dispose;
	upload = new Upload({});

	return {
		c() {
			main = element("main");
			div = element("div");
			create_component(upload.$$.fragment);
			t0 = space();
			em = element("em");
			em.textContent = "Upload your project's custom Tailwind CSS file";
			t2 = space();
			input = element("input");
			t3 = space();
			hr = element("hr");
			t4 = space();
			button = element("button");
			button.textContent = "Use Default Tailwind";
			attr(em, "class", "upload-instructions svelte-1o3b6fp");
			attr(div, "class", "drop-handler svelte-1o3b6fp");
			attr(input, "id", "uploader");
			attr(input, "type", "file");
			attr(input, "accept", "text/css");
			attr(input, "class", "svelte-1o3b6fp");
			attr(hr, "class", "divider svelte-1o3b6fp");
			attr(button, "class", "button svelte-1o3b6fp");
			attr(main, "class", "splash svelte-1o3b6fp");
		},
		m(target, anchor) {
			insert(target, main, anchor);
			append(main, div);
			mount_component(upload, div, null);
			append(div, t0);
			append(div, em);
			append(main, t2);
			append(main, input);
			/*input_binding*/ ctx[3](input);
			append(main, t3);
			append(main, hr);
			append(main, t4);
			append(main, button);
			current = true;

			if (!mounted) {
				dispose = [
					listen(window, "dragover", preventOpen),
					listen(window, "drop", preventOpen),
					listen(div, "drop", /*uploadFile*/ ctx[1]),
					listen(div, "click", /*triggerUploadDialog*/ ctx[2]),
					listen(input, "change", /*uploadFile*/ ctx[1]),
					listen(button, "click", /*click_handler*/ ctx[4])
				];

				mounted = true;
			}
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(upload.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(upload.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(main);
			destroy_component(upload);
			/*input_binding*/ ctx[3](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

let displayCSS = "";

function preventOpen(event) {
	event.preventDefault();
}

function instance($$self, $$props, $$invalidate) {
	let uploader;

	function uploadFile(event) {
		event.preventDefault();

		const file = (() => {
			if (event instanceof DragEvent) {
				return event.dataTransfer.items[0].getAsFile();
			} else {
				return event.target.files[0];
			}
		})();

		const reader = new FileReader();

		reader.onload = function (event) {
			parseWithString(event.target.result);
		};

		reader.readAsText(file, "UTF-8");
	}

	function triggerUploadDialog() {
		uploader.click();
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			uploader = $$value;
			$$invalidate(0, uploader);
		});
	}

	const click_handler = () => parseWithTailwind();
	return [uploader, uploadFile, triggerUploadDialog, input_binding, click_handler];
}

class Splash extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Splash;