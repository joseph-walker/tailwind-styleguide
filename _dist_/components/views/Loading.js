import './Loading.css.proxy.js';
/* src/components/views/Loading.svelte generated by Svelte v3.24.0 */
import {
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	svg_element
} from "/tailwind-styleguide/web_modules/svelte/internal.js";

import { state$ } from "./../../stores/state.js";

function create_fragment(ctx) {
	let div;
	let svg;
	let circle0;
	let circle1;
	let circle1_style_value;

	return {
		c() {
			div = element("div");
			svg = svg_element("svg");
			circle0 = svg_element("circle");
			circle1 = svg_element("circle");
			attr(circle0, "class", "bg svelte-uvcm21");
			attr(circle0, "cx", "60");
			attr(circle0, "cy", "60");
			attr(circle0, "r", RADIUS);
			attr(circle0, "stroke-width", "12");
			attr(circle1, "style", circle1_style_value = `stroke-dasharray: ${/*CIRCUMFERENCE*/ ctx[1]}; stroke-dashoffset: ${/*dashoffset*/ ctx[0]}`);
			attr(circle1, "class", "progress svelte-uvcm21");
			attr(circle1, "cx", "60");
			attr(circle1, "cy", "60");
			attr(circle1, "r", RADIUS);
			attr(circle1, "stroke-width", "12");
			attr(svg, "class", "progress svelte-uvcm21");
			attr(svg, "width", "120");
			attr(svg, "height", "120");
			attr(svg, "viewBox", "0 0 120 120");
			attr(div, "class", "wrapper svelte-uvcm21");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, svg);
			append(svg, circle0);
			append(svg, circle1);
		},
		p(ctx, [dirty]) {
			if (dirty & /*dashoffset*/ 1 && circle1_style_value !== (circle1_style_value = `stroke-dasharray: ${/*CIRCUMFERENCE*/ ctx[1]}; stroke-dashoffset: ${/*dashoffset*/ ctx[0]}`)) {
				attr(circle1, "style", circle1_style_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

const RADIUS = 54;

function instance($$self, $$props, $$invalidate) {
	let $state$;
	component_subscribe($$self, state$, $$value => $$invalidate(3, $state$ = $$value));
	const CIRCUMFERENCE = 2 * Math.PI * RADIUS;
	let percentage;
	let dashoffset;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$state$*/ 8) {
			$: $$invalidate(2, percentage = $state$.progress);
		}

		if ($$self.$$.dirty & /*percentage*/ 4) {
			$: $$invalidate(0, dashoffset = CIRCUMFERENCE * (1 - percentage));
		}
	};

	return [dashoffset, CIRCUMFERENCE];
}

class Loading extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Loading;